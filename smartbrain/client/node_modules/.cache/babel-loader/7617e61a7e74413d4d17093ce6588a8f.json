{"ast":null,"code":"var _jsxFileName = \"/smartbrain/client/src/components/Register.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst emailRegex = RegExp(/^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/);\n\nconst formValid = ({\n  formErrors,\n  ...rest\n}) => {\n  let valid = true; // validate form errors being empty\n\n  Object.values(formErrors).forEach(val => {\n    val.length > 0 && (valid = false);\n  }); // validate the form was filled out\n\n  Object.values(rest).forEach(val => {\n    val === null && (valid = false);\n  });\n  return valid;\n};\n\nclass Register extends Component {\n  constructor(props) {\n    super(props);\n\n    this.saveAuthTokenInSessions = token => {\n      window.sessionStorage.setItem('token', token);\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault(); // if form details VALID \n\n      if (formValid(this.state)) {\n        //console.log(\"FORM VALID\");\n        this.setState({\n          form: ''\n        }); // clear form error\n        /////////////////////////////////////////////////////////////////////////\n        // Register New User\n\n        fetch(`${process.env.REACT_APP_SERVER_URL}/register`, {\n          // remote heroku version \n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            //convert to JSON format\n            name: this.state.name,\n            email: this.state.email,\n            password: this.state.password\n          })\n        }).then(response => response.json()).then(user => {\n          if (user.id) {\n            // does the user exist? Did we receive a user with a property of id?\n            this.props.loadUser(user); // add new user to database\n          } else {\n            //error status if cant connect to postgresql db\n            this.setState({\n              form: /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [\"Unable to connect to Database\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 62\n                }, this), \"Please try later\"]\n              }, void 0, true)\n            });\n          }\n        }); //console.log(this.state);\n        /////////////////////////////////////////////////////////////////////////\n        //Auto Login New User into SmartBrain & Redirect to Home Route\n\n        fetch(`${process.env.REACT_APP_SERVER_URL}/signin`, {\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: this.state.email,\n            password: this.state.password\n          })\n        }).then(response => response.json()).then(data => {\n          // if login details valid\n          if (data && data.success === \"true\") {\n            this.saveAuthTokenInSessions(data.token);\n            this.props.loadUser(data.user);\n            this.props.onRouteChange('home'); // if login details invalid\n          } else {\n            this.setState({\n              form: /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [\"Details invalid!\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 49\n                }, this), \"Please check your details and try again\"]\n              }, void 0, true)\n            });\n          }\n        }); /////////////////////////////////////////////////////////////////////////\n        // if form details INVALID\n      } else {\n        //console.log(\"FORM INVALID\");\n        if (!this.state.name || !this.state.email || !this.state.password) {\n          this.setState({\n            form: 'Please enter details'\n          });\n        } else {\n          this.setState({\n            form: 'Please fix form errors!'\n          });\n        }\n      }\n    };\n\n    this.handleChange = e => {\n      e.preventDefault();\n      const {\n        name,\n        value\n      } = e.target;\n      let formErrors = { ...this.state.formErrors\n      };\n\n      switch (name) {\n        case \"name\":\n          formErrors.name = value.length < 3 ? \"minimum 3 characters\" : \"\";\n          break;\n\n        case \"email\":\n          formErrors.email = emailRegex.test(value) ? \"\" : \"invalid email address\";\n          break;\n\n        case \"password\":\n          formErrors.password = value.length < 6 ? \"minimum 6 characters\" : \"\";\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        formErrors,\n        [name]: value\n      }); // display inline error messages\n    };\n\n    this.state = {\n      name: null,\n      email: null,\n      password: null,\n      form: \"\",\n      formErrors: {\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        form: \"\"\n      }\n    };\n  }\n\n  render() {\n    const {\n      formErrors\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"article\", {\n      className: \"center measure\",\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        className: \"f1 fw6 ph0 mh0\",\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"register\",\n        children: [/*#__PURE__*/_jsxDEV(\"fieldset\", {\n          id: \"register\",\n          className: \"b--transparent ph0 mh0 text-shadow\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"db lh-copy f5 black b tl\",\n              htmlFor: \"name\",\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: `f5 pa2 input-reset ba bg-white hover-bg-black hover-white w-100${formErrors.name && ' ba bw2 b--red'}`,\n              placeholder: \"Enter Name\",\n              type: \"text\",\n              name: \"name\",\n              noValidate: true,\n              onChange: this.handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 21\n            }, this), formErrors.name && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"dib bg-red white ma3 pa2 f5 ttc shadow-1\",\n              children: formErrors.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"db lh-copy f5 black b tl\",\n              htmlFor: \"email-address\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: `f5 pa2 input-reset ba bg-white hover-bg-black hover-white w-100${formErrors.email && ' ba bw2 b--red'}`,\n              placeholder: \"Enter Email\",\n              type: \"email\",\n              name: \"email\",\n              noValidate: true,\n              onChange: this.handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 21\n            }, this), formErrors.email && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"dib bg-red white ma3 pa2 f5 ttc shadow-1\",\n              children: formErrors.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"db lh-copy f5 black b tl\",\n              htmlFor: \"password\",\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: `f5 pa2 input-reset ba bg-white hover-bg-black hover-white w-100${formErrors.password && ' ba bw2 b--red'}`,\n              placeholder: \"Enter Password\",\n              type: \"password\",\n              name: \"password\",\n              noValidate: true,\n              onChange: this.handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 21\n            }, this), formErrors.password && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"dib bg-red white ma3 pa2 f5 ttc shadow-1\",\n              children: formErrors.password\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt3 tc\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handleSubmit // function that gets called to change state to 'home'\n            ,\n            className: \"b ph3 pv2 input-reset ba bg-black white grow pointer f6 dib hover-bg-yellow ttu shadow-1\",\n            type: \"submit\",\n            value: \"Register\",\n            children: \"Register\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 17\n          }, this), this.state.form && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"dib bg-red white ma3 pa2 f5 ttc shadow-1 lh-copy\",\n              children: this.state.form\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 27\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Register;","map":{"version":3,"sources":["/smartbrain/client/src/components/Register.js"],"names":["React","Component","emailRegex","RegExp","formValid","formErrors","rest","valid","Object","values","forEach","val","length","Register","constructor","props","saveAuthTokenInSessions","token","window","sessionStorage","setItem","handleSubmit","e","preventDefault","state","setState","form","fetch","process","env","REACT_APP_SERVER_URL","method","headers","body","JSON","stringify","name","email","password","then","response","json","user","id","loadUser","data","success","onRouteChange","handleChange","value","target","test","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nconst emailRegex = RegExp(\n  /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n);\n\nconst formValid = ({ formErrors, ...rest }) => {\n  let valid = true;\n\n  // validate form errors being empty\n  Object.values(formErrors).forEach(val => {\n    val.length > 0 && (valid = false);\n  });\n\n  // validate the form was filled out\n  Object.values(rest).forEach(val => {\n    val === null && (valid = false);\n  });\n\n  return valid;\n};\n\n\nclass Register extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: null,\n      email: null,\n      password: null,\n      form: \"\",\n      formErrors: {\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        form: \"\"\n      }\n    };\n  }\n\n  saveAuthTokenInSessions = (token) => { \n    window.sessionStorage.setItem('token', token);\n  }\n\n\n  // on submit function\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    // if form details VALID \n    if (formValid(this.state)) {\n      //console.log(\"FORM VALID\");\n      this.setState({form: ''}) // clear form error\n    /////////////////////////////////////////////////////////////////////////\n    // Register New User\n    fetch(`${process.env.REACT_APP_SERVER_URL}/register`, { // remote heroku version \n      method: 'post',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({ //convert to JSON format\n        name: this.state.name,\n        email: this.state.email,\n        password: this.state.password\n      })\n    })\n    .then(response => response.json())\n    .then(user => {\n      if (user.id) { // does the user exist? Did we receive a user with a property of id?\n        this.props.loadUser(user); // add new user to database\n      } else {\n        //error status if cant connect to postgresql db\n        this.setState({form: (<>Unable to connect to Database<br />Please try later</>) })\n      }\n    })\n    //console.log(this.state);\n    /////////////////////////////////////////////////////////////////////////\n    //Auto Login New User into SmartBrain & Redirect to Home Route\n    fetch(`${process.env.REACT_APP_SERVER_URL}/signin`, {\n      method: 'post',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        email: this.state.email,\n        password: this.state.password\n      })\n    })\n    .then(response => response.json())\n    .then(data => {\n      // if login details valid\n      if (data && data.success === \"true\") {\n        this.saveAuthTokenInSessions(data.token)\n        this.props.loadUser(data.user)\n        this.props.onRouteChange('home');\n      // if login details invalid\n      } else {\n        this.setState({form: (<>Details invalid!<br />Please check your details and try again</>) })\n      }\n    })\n  /////////////////////////////////////////////////////////////////////////\n  // if form details INVALID\n  } else {\n    //console.log(\"FORM INVALID\");\n    if ( !this.state.name || !this.state.email || !this.state.password ) {\n      this.setState({form: 'Please enter details'})\n    } else {\n      this.setState({form: 'Please fix form errors!'})\n    }\n  }\n\n};\n\n\n// on form change events\n  handleChange = (e) => {\n    e.preventDefault();\n    const { name, value } = e.target;\n    let formErrors = { ...this.state.formErrors };\n\n    switch (name) {\n      case \"name\":\n      formErrors.name =\n          value.length < 3 ? \"minimum 3 characters\" : \"\";\n      break;\n      case \"email\":\n      formErrors.email = emailRegex.test(value)\n          ? \"\"\n          : \"invalid email address\";\n      break;\n      case \"password\":\n      formErrors.password =\n          value.length < 6 ? \"minimum 6 characters\" : \"\";\n      break;\n\n      default:\n      break;\n    }\n\n    this.setState({ formErrors, [name]: value }); // display inline error messages\n  };\n\n\n\n  render() {\n    const { formErrors } = this.state;\n\n    return (\n      <article className=\"center measure\">\n\n            <legend className=\"f1 fw6 ph0 mh0\">Register</legend>\n\n              <form id=\"register\">\n\n                <fieldset id=\"register\" className=\"b--transparent ph0 mh0 text-shadow\">\n\n                  <div className=\"mt3\">\n                    <label className=\"db lh-copy f5 black b tl\" htmlFor=\"name\">Name</label>\n                    <input\n                      className={`f5 pa2 input-reset ba bg-white hover-bg-black hover-white w-100${formErrors.name && ' ba bw2 b--red'}`}\n                      placeholder=\"Enter Name\"\n                      type=\"text\"\n                      name=\"name\"\n                      noValidate\n                      onChange={this.handleChange}\n                    />\n                    {formErrors.name && (\n                      <span className=\"dib bg-red white ma3 pa2 f5 ttc shadow-1\">{formErrors.name}</span>\n                    )}\n                  </div>\n\n                  <div className=\"mt3\">\n                    <label className=\"db lh-copy f5 black b tl\" htmlFor=\"email-address\">Email</label>\n                    <input\n                      className={`f5 pa2 input-reset ba bg-white hover-bg-black hover-white w-100${formErrors.email && ' ba bw2 b--red'}`} \n                      placeholder=\"Enter Email\"\n                      type=\"email\"\n                      name=\"email\"\n                      noValidate\n                      onChange={this.handleChange}\n                    />\n                    {formErrors.email && (\n                      <span className=\"dib bg-red white ma3 pa2 f5 ttc shadow-1\">{formErrors.email}</span>\n                    )}\n                  </div>\n\n                  <div className=\"mt3\">\n                    <label className=\"db lh-copy f5 black b tl\" htmlFor=\"password\">Password</label>\n                    <input\n                      className={`f5 pa2 input-reset ba bg-white hover-bg-black hover-white w-100${formErrors.password && ' ba bw2 b--red'}`}\n                      placeholder=\"Enter Password\"\n                      type=\"password\"\n                      name=\"password\"\n                      noValidate\n                      onChange={this.handleChange}\n                    />\n                    {formErrors.password && (\n                      <span className=\"dib bg-red white ma3 pa2 f5 ttc shadow-1\">{formErrors.password}</span>\n                    )}\n                  </div>\n\n                </fieldset>\n\n              <div className=\"mt3 tc\">\n                <button\n                  onClick={this.handleSubmit} // function that gets called to change state to 'home'\n                  className=\"b ph3 pv2 input-reset ba bg-black white grow pointer f6 dib hover-bg-yellow ttu shadow-1\"\n                  type=\"submit\" \n                  value=\"Register\"\n                >Register</button>\n                {this.state.form && (\n                  <><br /><span className=\"dib bg-red white ma3 pa2 f5 ttc shadow-1 lh-copy\">{this.state.form}</span></>\n                )}\n              </div>\n\n            </form>\n\n      </article>\n    );\n\n  }\n}\n\nexport default Register;"]},"metadata":{},"sourceType":"module"}